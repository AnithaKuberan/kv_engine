#! /bin/ksh
#
# Copyright (c) 2010, NorthScale, Inc.
# All rights reserved
#

PATH=/bin:/usr/bin:/sbin:/usr/sbin; export PATH

verbose=

usage()
{
  cat <<EOF

Usage $0 [-o reportfile] [-v] [server 1 .. server n]
   -o reportfile Use the specified file for output (default: membase.log)
   -v verbose

For each server supplied the script will add traceroute information and
connect attempts to the ports membase use on that server.

EOF
  exit 1
}

progress() {
    if [ "${verbose}" = "true" ]
    then
       echo "Checking $*"
    fi
}

# Try to locate a program by using which, and verify that the file is an
# executable
locate_binary() {
  for f in $@
  do
    file=`which $f 2>/dev/null | grep -v '^no '`
    if test -n "$file" -a -x "$file"; then
      echo $file
      return 0
    fi
  done

  echo ""
  return 1
}

execute() {
    title="$1"
    shift
    progress $title
    cat >> ${report} <<EOF
******************************************************************************
$title ($*)

EOF
    binary=`locate_binary $1`
    if [ $? -eq 0 ]
    then
        shift
	${binary} "$@" >> ${report} 2>&1
    else
     cat >> ${report} <<EOF
Not supported on this platform (failed to locate $1)
EOF
    fi
}

add_files() {
    progress $1
    cat >> ${report} <<EOF
******************************************************************************
$1

EOF
    shift
    for i in $*
    do
      if [ -f $i ]
      then
         echo "$i:" >> ${report}
         cat $i >> ${report}
      fi
    done
}

sample() {
    progress $1
    cat >> ${report} <<EOF
******************************************************************************
$1

EOF
    shift
    binary=`locate_binary $1`
    if [ $? -eq 0 ]
    then
        shift
        waittime=$1
        shift
	${binary} "$@" >> ${report} 2>&1
        progress "Sleeping $waittime"
        echo "Sleeping $waittime" >> ${report} 2>&1
        sleep $waittime
	${binary} "$@" >> ${report} 2>&1
    else
     cat >> ${report} <<EOF
Not supported on this platform (failed to locate $1)
EOF
    fi
}

check_host() {
    host=`echo $1 | cut -f 1 -d :`
    echo $host | grep : > /dev/null 2>&1
    if [ $? -eq 0 ]
    then
       port=`echo $1 | cut -f 2 -d :`
    fi

    progress host ${host}
    cat >> ${report} <<EOF
******************************************************************************
Host ${host}

EOF
    traceroute=`locate_binary traceroute`
    if [ $? -eq 0 ]
    then
        progress "   traceroute"
        echo "traceroute $host" >> ${report} 2>&1
        ${traceroute} ${host} >> ${report} 2>&1
    else
	echo "Failed to locate traceroute" >> ${report} 2>&1
    fi

    netcat=`locate_binary nc`
    if [ $? -eq 0 ]
    then
        ports="11210 11211 8091 22"
        if [ "x${port}" != "x" ]
        then
            ports="${port}"
        fi

        for port in ${ports}
        do
            progress "   connect to ${port}"
            ${netcat} -z ${host} ${port} >> ${report} 2>&1
            if [ $? -ne 0 ]
            then
                echo "Failed to connect to port ${port}" >> ${report} 2>&1
            fi
        done
    else
	echo "Failed to locate nc" >> ${report} 2>&1
    fi
}

# Program entry point
set -- `getopt o:vh $*`
if [ $? != 0 ]
then
   usage
fi

for i in $*
do
   case $i in
   -o)  report=$2
        shift 2
        ;;
   -v)  verbose="true"
        shift
        ;;
   -h)  usage
        ;;
    --) shift
        break
        ;;
   esac
done

if [ -z "${report}" ]
then
   report=membase.log
fi

touch ${report} 2>/dev/zero
if [ $? -ne 0 ]
then
   echo "Can't write to ${report}"
   exit 1
fi

os=`uname -s`

cat > ${report} <<EOF
==============================================================================

System report generated on `hostname` `date` by
`id`

This report contains a list software and other system configuration
information.  It is included in the report to allow NorthScale to
quickly diagnose problems with deployments.

The report may be reviewed and if there is information considered
sensitive, it may be removed before submitting it to NorthScale.

==============================================================================

EOF

execute "System configuration" uname -a
add_files "System release" cat /etc/issue /etc/*release*
execute "Directory structure" ls -lR /opt/membase /var/opt/membase /etc/opt/membase

case "${os}" in
  SunOS)
    execute "Process list snapshot" prstat -a -c -n 100 -t -v -L 1 10
    execute "Process list" ps -ef
    execute "Service configuration" svcs -a
    execute "Swap configuration" swap -l
    execute "Disk activity" zpool iostat 1 10
    execute "Disk activity" iostat -E 1 10
    ;;
  Linux)
    execute "Process list snapshot" top -H -n 1
    execute "Process list " ps -AwwL -o user,pid,lwp,ppid,nlwp,pcpu,pri,nice,vsize,rss,tty,stat,wchan:12,start,bsdtime,command
    execute "Swap configuration" free -t
    execute "Swap configuration" swapon -s
    execute "Kernel modules" lsmod
    execute "Installed software" rpm -qa
    ;;
  Darwin)
    execute "Process list snapshot" top -l 1
    execute "Disk activity" iostat 1 10
    execute "Process list " ps -Aww -o user,pid,lwp,ppid,nlwp,pcpu,pri,nice,vsize,rss,tty,stat,wchan:12,start,bsdtime,command
    ;;
esac

sample "Network configuration" 10 ifconfig -a
execute "Network status" netstat -anp
execute "Network routing table" route -n
execute "Arp cache" arp -na
execute "Filesystem" df -ha
execute "System activity reporter" sar 1 10
execute "System paging activity" vmstat 1 10
execute "System uptime" uptime
execute "northscale user definition" getent passwd northscale
uid=`id | cut -f 2 -d = | cut -f 1 -d \(`
if [ "$uid" == "0" ]
then
   execute "northscale user limits" su northscale -c "ulimit -a"
fi
execute "Interrupt status" intrstat 1 10
execute "Processor status" mpstat 1 10
add_files "System log" /var/adm/messages
execute "Kernel log buffer" dmesg
execute "membase logs" /opt/membase/bin/browse_logs

cores=`find /opt/membase /var/opt/membase -name "*core*" 2>/dev/null | egrep -v analyze_core\|.log$ `
if [ "x$cores" != "x" ]
then
   for file in $cores
   do
      execute "Corefile ${file}" /opt/membase/bin/analyze_core -f /tmp/core-report.$$ ${file}
      if [ -f /tmp/core-report.$$ ]
      then
         cat /tmp/core-report.$$ >> ${report}
         rm /tmp/core-report.$$
      fi
   done
fi

for host in $*
do
  check_host ${host}
done
