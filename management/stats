#!/usr/bin/env python

import clitool
import sys
import itertools

BIG_VALUE = 2 ** 60
SMALL_VALUE = - (2 ** 60)

def stats_formatter(stats, prefix=" ", cmp=None):
    longest = max((len(x) + 2) for x in stats.keys())
    for stat, val in sorted(stats.items(), cmp=cmp):
        s = stat + ":"
        print "%s%s%s" % (prefix, s.ljust(longest), val)

def stats_vkey(mc, key, vb, username=None, password=''):
    if username:
        mc.sasl_auth_plain(username, password)
    cmd = "vkey %s %s" % (key, str(vb))
    vbs = mc.stats(cmd)
    print "verification for key", key
    stats_formatter(vbs)

def stats_all(mc, username=None, password=''):
    if username:
        mc.sasl_auth_plain(username, password)
    stats_formatter(mc.stats())

def stats_timings(mc, username=None, password=''):
    if username:
        mc.sasl_auth_plain(username, password)

    def seg(k, v):
        # Parse ('some_stat_x_y', 'v') into (('some_stat', x, y), v)
        ka = k.split('_')
        k = '_'.join(ka[0:-1])
        kstart, kend = [int(x) for x in ka[-1].split(',')]
        return ((k, kstart, kend), int(v))

    def label(s):
        # -(2**64) -> '-inf'
        # 2**64 -> 'inf'
        # 0 -> '0'
        # 4 -> '4us'
        # 838384 -> '838ms'
        # 8283852 -> '8s'
        if s > BIG_VALUE:
            return 'inf'
        elif s < SMALL_VALUE:
            return '-inf'
        elif s == 0:
            return '0'
        sizes = ('s', 'ms', 'us')
        sizeMap=zip(sizes, [1000 ** x for x in range(len(sizes)-1, -1, -1)])
        lbl, factor = itertools.dropwhile(lambda x: x[1] > s, sizeMap).next()
        return "%d%s" % (s / factor, lbl)

    # Try to figure out the terminal width.  If we can't, 79 is good
    def termWidth():
        try:
            import fcntl, termios, struct
            h, w, hp, wp = struct.unpack('HHHH',
                                         fcntl.ioctl(0, termios.TIOCGWINSZ,
                                                     struct.pack('HHHH', 0, 0, 0, 0)))
            return w
        except:
            return 79

    # Acquire, sort, categorize, and label the timings.
    stats = sorted([seg(*kv) for kv in mc.stats('timings').items()])
    dd = {}
    totals = {}
    longest = 0
    for s in stats:
        lbl = "%s - %s" % (label(s[0][1]), label(s[0][2]))
        longest = max(longest, len(lbl) + 1)
        k = s[0][0]
        totals[k] = totals.get(k, 0) + 1
        l = dd.get(k, [])
        l.append((lbl, s[1]))
        dd[k] = l
        totals[s[0][0]] += s[1]

    # Now do the actual output
    for k in sorted(dd):
        print " %s (%d total)" % (k, totals[k])
        widestnum = max(len(str(v[1])) for v in dd[k])
        ccount = 0
        for lbl,v in dd[k]:
            ccount += v
            pcnt = (ccount * 100.0) / totals[k]
            # This is the important part being printed
            toprint = "    %s: (%6.02f%%) %s" % (lbl.ljust(longest), pcnt,
                                                 str(v).rjust(widestnum))
            # Throw in a bar graph since they're popular and eye catchy
            remaining = termWidth() - len(toprint)
            lpcnt = float(v) / totals[k]
            print "%s %s" % (toprint, '#' * int(lpcnt * remaining))

def stats_tap(mc, username=None, password=''):
    if username:
        mc.sasl_auth_plain(username, password)
    stats_formatter(mc.stats('tap'))

def stats_hash(mc, username=None, password=''):
    if username:
        mc.sasl_auth_plain(username, password)
    stats_formatter(mc.stats('hash'))

if __name__ == '__main__':

    c = clitool.CliTool()

    c.addCommand('vkey', stats_vkey, 'vkey keyname vbid [username password]')
    c.addCommand('all', stats_all, 'all [username password]')
    c.addCommand('hash', stats_hash, 'hash [username password]')
    c.addCommand('tap', stats_tap, 'tap [username password]')
    c.addCommand('timings', stats_timings, 'timings [username password]')

    c.execute()
