#!/usr/bin/env python
# -*-python-*-

"""
Restore tool for Membase.

"""

import itertools
import optparse
import Queue
import sqlite3
import sys
import thread
import threading
import time
import traceback

import mc_bin_client

DEFAULT_THREADS = 4
DEFAULT_HOST = "127.0.0.1"
DEFAULT_PORT = 11211
QUEUE_SIZE = 1000


def connect(opts):
    mc = mc_bin_client.MemcachedClient(opts.host, opts.port)
    if opts.username is not None:
        mc.sasl_auth_plain(opts.username, opts.password)

    return mc


def worker(queue, opts):
    try:
        mc = connect(opts)
        update = mc.add if opts.add else mc.set
        k, flags, exptime, v = queue.get()
        while True:
            try:
                update(str(k), flags, exptime, str(v))
            except mc_bin_client.MemcachedError, error:
                if error.status == 2:
                    # Already exists
                    queue.task_done()
                    k, flags, exptime, v = queue.get()
                else:
                    print >> sys.stderr, "Error on key {0!r}: {1}".format(str(k), error)
                    time.sleep(1)
            except:
                # For other errors, reconnect
                traceback.print_exc()
                mc = connect(opts)
            else:
                queue.task_done()
                k, flags, exptime, v = queue.get()
    except:
        traceback.print_exc()
    finally:
        thread.interrupt_main()


def main():
    usage = "%prog [opts] db_files (use -h for detailed help)"
    epilog = "Restore keys from the sqlite backing store files from a single node."
    parser = optparse.OptionParser(usage=usage, epilog=epilog)
    parser.add_option("-a", "--add", action="store_true", default=False,
                      help="Use add instead of set to avoid overwriting existing items")
    parser.add_option("-H", "--host", default=DEFAULT_HOST,
                      help="Hostname of moxi server to connect to")
    parser.add_option("-p", "--port", type="int", default=DEFAULT_PORT,
                      help="Port of moxi server to connect to")
    parser.add_option("-u", "--username", help="Username to authenticate with")
    parser.add_option("-P", "--password", default="",
                      help="Password to authenticate with")
    parser.add_option("-t", "--threads", type="int", default=DEFAULT_THREADS,
                      help="Number of worker threads")
    opts, db_filenames = parser.parse_args()

    if len(db_filenames) == 0:
        parser.print_usage()
        sys.exit("No filenames provided")

    attached_dbs = ["db{0}".format(i) for i in xrange(len(db_filenames))]
    # Open the first given filename as the main database
    db = sqlite3.connect(':memory:')
    # Attach the remaining files
    db.executemany("attach ? as ?", zip(db_filenames, attached_dbs))
    # Find all the tables
    table_dbs = {}
    cur = db.cursor()
    for db_name in attached_dbs:
        cur.execute("select name from %s.sqlite_master" % db_name)
        for (table_name,) in cur:
            table_dbs.setdefault(table_name, []).append(db_name)

    # Determine which db the state table is in; will error if there's more than
    # one
    try:
        (state_db,) = table_dbs[u'vbucket_states']
    except ValueError:
        sys.exit("Unable to locate unique vbucket_states table in database files")

    sql = """select k, flags, exptime, v from `{{0}}`.kv as kv,
             `{0}`.vbucket_states as vb
             where kv.vbucket = vb.vbid and kv.vb_version = kv.vb_version and
             vb.state like 'active'""".format(state_db)

    queue = Queue.Queue(QUEUE_SIZE)
    connect_args = (opts.host, opts.port, opts.username, opts.password)
    threads = [threading.Thread(target=worker,
                                args=(queue, opts))]
    for thread in threads:
        thread.daemon = True
        thread.start()

    count = 0
    for db_name in table_dbs[u'kv']:
        cur.execute(sql.format(db_name))
        for row in cur:
            queue.put(row)
            count += 1
            if count & 1023 == 0:
                print count

    queue.join()


if __name__ == '__main__':
    main()
