#!/usr/bin/env python

import sys
import os
import glob
import subprocess

TARGET_VERSION=2

# Backported any to older versions of python
try:
    any
except NameError:
    def any(a):
        for i in a:
            if i:
                return True
        return False

def run_sql(sqlite, fn, sql, more_args=[]):
    args = ['-batch', '-bail']
    cmd = [sqlite] + args + more_args + [fn]
    p = subprocess.Popen(cmd,
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    (o,e) = p.communicate(sql)
    if p.returncode != 0:
        sys.stderr.write("Error running query:  %s\n" % sql)
        sys.stderr.write(e)
        sys.exit(1)
    return o

def version(sqlite, fn):
    return int(run_sql(sqlite, fn, "pragma user_version;").strip())

def findCmd(cmdName):
    cmd_dir = os.path.dirname(sys.argv[0])
    bin_dir = cmd_dir
    possible = [os.path.join(bin_dir, p) for p in [cmdName, cmdName + '.exe']]
    cmdbin = [p for p in possible if os.path.exists(p)][0]
    return cmdbin

def findSqlite():
    return findCmd('sqlite3')

def usage(command, msg):
    e = """Error:  %s

Usage:  %s /path/to/srcdb [...] /path/to/dest

src is the path to the main database.  You can specify more than one.
dest can be either a new main database filename, or a directory
(the old DB name will be used).

If more than one src db is specified, the destination *must* be a
directory.""" % (msg, command)
    sys.exit(e)

def doset(sqlite, src, dest):
    v = version(sqlite, src)
    print 'Source version from "%s" is %d' % (src, v)

    oldbase = os.path.basename(src)
    if os.path.isdir(dest):
        dest = os.path.join(dest, oldbase)

    args = [findCmd('dbconvert')]
    if v < 2:
        args.append("--remove-crlf")
    args.append(src)
    args.append(dest)

    p = subprocess.Popen(args,
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    (o,e) = p.communicate()
    if p.returncode != 0:
        sys.stderr.write("Error running convert (%s)\n" % ' '.join(args))
        sys.stderr.write(e)
        sys.exit(1)

def main():
    command = sys.argv[0]
    args = sys.argv[1:]
    try:
        dest = args.pop()
        srcs = args
        if not srcs:
            usage(command, "No destination specified")
        if any(os.path.isdir(p) for p in srcs):
            usage(command, "Source must point to main DBs, not directories")
        if len(srcs) > 1 and not os.path.isdir(dest):
            usage(command,
                  "Multiple sources, but destination is not a directory.")
    except IndexError:
        usage(command, "Too few arguments")

    sqlite = findSqlite()

    for src in srcs:
        doset(sqlite, src, dest)

if __name__ == '__main__':
    main()
