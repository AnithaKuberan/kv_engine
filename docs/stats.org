#+TITLE:     EP Stats
#+AUTHOR:    Dustin Sallings
#+EMAIL:     dustin@spy.net
#+DATE:      2010-02-08 Mon
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+STYLE:  <link rel="stylesheet" type="text/css" href="myorg.css" />

* Getting Started

For introductory information on stats within membase, start with the
[[http://wiki.membase.org/display/membase/Membase%2BStatistics][membase wiki stats page]].

* Stats Definitions

** Toplevel Stats

| Stat                          | Description                               |
|-------------------------------+-------------------------------------------|
| ep_version                    | Version number of ep_engine.              |
| ep_storage_age                | Seconds since most recently               |
|                               | stored object was initially queued.       |
| ep_storage_age_highwat        | ep_storage_age high water mark            |
| ep_min_data_age               | Minimum data age setting.                 |
| ep_queue_age_cap              | Queue age cap setting.                    |
| ep_max_txn_size               | Max number of updates per transaction.    |
| ep_data_age                   | Second since most recently                |
|                               | stored object was modified.               |
| ep_data_age_highwat           | ep_data_age high water mark               |
| ep_too_young                  | Number of times an object was             |
|                               | not stored due to being too young.        |
| ep_too_old                    | Number of times an object was             |
|                               | stored after being dirty too long.        |
| ep_total_enqueued             | Total number of items queued for          |
|                               | persistence.                              |
| ep_total_new_items            | Total number of persisted new items.      |
| ep_total_del_items            | Total number of persisted deletions.      |
| ep_total_persisted            | Total number of items persisted.          |
| ep_item_flush_failed          | Number of times an item failed to flush   |
|                               | due to storage errors.                    |
| ep_item_commit_failed         | Number of times a transaction failed to   |
|                               | commit due to storage errors.             |
| ep_expired                    | Number of times an item was expired.      |
| ep_item_flush_expired         | Number of times an item is not flushed    |
|                               | due to the expiry of the item             |
| ep_queue_size                 | Number of items queued for storage.       |
| ep_flusher_todo               | Number of items remaining to be written.  |
| ep_flusher_state              | Current state of the flusher thread.      |
| ep_commit_num                 | Total number of write commits.            |
| ep_commit_time                | Number of seconds of most recent commit.  |
| ep_commit_time_total          | Cumulative seconds spent committing.      |
| ep_vbucket_del                | Number of vbucket deletion events.        |
| ep_vbucket_del_fail           | Number of failed vbucket deletion events. |
| ep_flush_preempts             | Num of flush early exits for read reqs.   |
| ep_flush_duration             | Number of seconds of most recent flush.   |
| ep_flush_duration_total       | Cumulative seconds spent flushing.        |
| ep_flush_duration_highwat     | ep_flush_duration high water mark.        |
| curr_items                    | Num items in active vbuckets.
| curr_items_tot                | Num current items including those not     |
|                               | active (replica, dead and pending states) |
| ep_kv_size                    | Memory used to store keys and values.     |
| ep_overhead                   | Extra memory used by rep queues, etc..    |
| ep_max_data_size              | Max amount of data allowed in memory.     |
| ep_mem_low_wat                | Low water mark for auto-evictions.        |
| ep_mem_high_wat               | High water mark for auto-evictions.       |
| ep_total_cache_size           | The total size of all items in the cache  |
| ep_oom_errors                 | Number of times unrecoverable OOMs        |
|                               | happened while processing operations      |
| ep_tmp_oom_errors             | Number of times temporary OOMs            |
|                               | happened while processing operations      |
| ep_bg_fetched                 | Number of items fetched from disk.        |
| ep_num_pager_runs             | Number of times we ran pager loops        |
|                               | to seek additional memory.                |
| ep_num_expiry_pager_runs      | Number of times we ran expiry pager loops |
|                               | to purge expired items from memory/disk   |
| ep_num_value_ejects           | Number of times item values got ejected   |
|                               | from memory to disk                       |
| ep_num_eject_failures         | Number of items that could not be ejected |
| ep_num_not_my_vbuckets        | Number of times Not My VBucket exception  |
|                               | happened during runtime                   |
| ep_warmup_thread              | Warmup thread status.                     |
| ep_warmed_up                  | Number of items warmed up.                |
| ep_warmup_dups                | Duplicates encountered during warmup.     |
| ep_warmup_oom                 | OOMs encountered during warmup.           |
| ep_warmup_time                | Time (µs) spent by warming data.          |
| ep_tap_keepalive              | Tap keepalive time.                       |
| ep_dbname                     | DB path.                                  |
| ep_dbinit                     | Number of seconds to initialize DB.       |
| ep_dbshards                   | Number of shards for db store             |
| ep_db_strategy                | SQLite db strategy                        |
| ep_warmup                     | true if warmup is enabled.                |
| ep_io_num_read                | Number of io read operations              |
| ep_io_num_write               | Number of io write operations             |
| ep_io_read_bytes              | Number of bytes read (key + values)       |
| ep_io_write_bytes             | Number of bytes written (key + values)    |
| ep_pending_ops                | Number of ops awaiting pending vbuckets   |
| ep_pending_ops_total          | Total blocked pending ops since reset     |
| ep_pending_ops_max            | Max ops seen awaiting 1 pending vbucket   |
| ep_pending_ops_max_duration   | Max time (µs) used waiting on pending     |
|                               | vbuckets                                  |
| ep_bg_num_samples             | The number of samples included in the avg |
| ep_bg_min_wait                | The shortest time (µs) in the wait queue  |
| ep_bg_max_wait                | The longest time (µs) in the wait queue   |
| ep_bg_wait_avg                | The average wait time (µs) for an item    |
|                               | before it is serviced by the dispatcher   |
| ep_bg_min_load                | The shortest load time (µs)               |
| ep_bg_max_load                | The longest load time (µs)                |
| ep_bg_load_avg                | The average time (µs) for an item to be   |
|                               | loaded from the persistence layer         |
| ep_num_non_resident           | The number of non-resident items          |

** Tap stats

| ep_tap_total_queue    | Sum of tap queue sizes on the current     |
|                       | tap queues                                |
| ep_tap_total_fetched  | Sum of all tap messages sent              |
| ep_tap_bg_fetched     | Number of tap disk fetches                |
| ep_tap_fg_fetched     | Number of tap memory fetches              |
| ep_tap_deletes        | Number of tap deletion messages sent      |
| ep_tap_keepalive      | How long to keep tap connection state     |
|                       | after client disconnect.                  |
| ep_tap_count          | Number of tap connections.                |
| ep_tap_bg_num_samples | The number of tap bg fetch samples        |
|                       | included in the avg                       |
| ep_tap_bg_min_wait    | The shortest time (µs) for a tap item     |
|                       | before it is serviced by the dispatcher   |
| ep_tap_bg_max_wait    | The longest time (µs) for a tap item      |
|                       | before it is serviced by the dispatcher   |
| ep_tap_bg_wait_avg    | The average wait time (µs) for a tap item |
|                       | before it is serviced by the dispatcher   |
| ep_tap_bg_min_load    | The shortest time (µs) for a tap item to  |
|                       | be loaded from the persistence layer      |
| ep_tap_bg_max_load    | The longest time (µs) for a tap item to   |
|                       | be loaded from the persistence layer      |
| ep_tap_bg_load_avg    | The average time (µs) for a tap item to   |
|                       | be loaded from the persistence layer      |

*** Per Tap Client Stats

Each stat begins with =ep_tapq:= followed by a unique /client_id/ and
another colon.  For example, if your client is named, =slave1=, the
=qlen= stat would be =ep_tapq:slave1:qlen=.

| qlen               | Queue size for the given client_id.     |
| qlen_high_pri      | High priority tap queue items.          |
| qlen_low_pri       | Low priority tap queue items.           |
| vb_filters         | Size of connection vbucket filter set.  |
| rec_fetched        | Tap messages sent to the client.        |
| idle               | True if this connection is idle.        |
| empty              | True if this connection has no items.   |
| complete           | True if backfill is complete.           |
| has_item           | True when there is a bg fetched item    |
|                    | ready.                                  |
| has_queued_item    | True when there is a key ready to be    |
|                    | looked up (may become fg or bg item)    |
| bg_queue_size      | Number of bg fetches enqueued for this  |
|                    | connection.                             |
| bg_queued          | Number of background fetches enqueued.  |
| bg_result_size     | Number of ready background results.     |
| bg_results         | Number of background results ready.     |
| bg_jobs_issued     | Number of background jobs started.      |
| bg_jobs_completed  | Number of background jobs completed.    |
| bg_backlog_size    | Number of items pending bg fetch.       |
| flags              | Connection flags set by the client.     |
| connected          | true if this client is connected        |
| pending_disconnect | true if we're hanging up on this client |
| paused             | true if this client is blocked          |
| pending_backfill   | true if we're still backfilling keys    |
|                    | for this connection                     |
| reconnects         | Number of reconnects from this client.  |
| disconnects        | Number of disconnects from this client. |
| backfill_age       | The age of the start of the backfill.   |
| ack_seqno          | The current tap ACK sequence number.    |
| recv_ack_seqno     | Last receive tap ACK sequence number.   |
| ack_log_size       | Tap ACK backlog size.                   |
| ack_window_full    | true if our tap ACK window is full.     |
| expires            | When this ACK backlog expires.          |

* Details

** Ages

The difference between =ep_storage_age= and =ep_data_age= is somewhat
subtle, but when you consider that a given record may be updated
multiple times before hitting persistence, it starts to be clearer.

=ep_data_age= is how old the data we actually wrote is.

=ep_storage_age= is how long the object has been waiting to be
persisted.

** Too Young

=ep_too_young= is incremented every time an object is encountered
whose =data age= is more recent than is allowable for the persistence
layer.

For example, if an object that was queued five minutes ago is picked
off the =todo= queue and found to have been updated fifteen seconds
ago, it will not be stored, =ep_too_young= will be incremented, and
the key will go back on the input queue.

** Too Old

=ep_too_old= is incremented every time an object is encountered whose
=queue age= exceeds the =ep_queue_age_cap= setting.

=ep_queue_age_cap= generally exists as a safety net to prevent the
=ep_min_data_age= setting from preventing persistence altogether.

** Warming Up

Opening the data store is broken into three distinct phases:

*** Initializing

During the initialization phase, the server is not accepting
connections or otherwise functional.  This is often quick, but in a
server crash can take some time to perform recovery of the underlying
storage.

This time is made available via the =ep_dbinit= stat.

*** Warming Up

After initialization, warmup begins.  At this point, the server is
capable of taking new writes and responding to reads.  However, only
records that have been pulled out of the storage or have been updated
from other clients will be available for request.

(note that records read from persistence will not overwrite new
records captured from the network)

During this phase, =ep_warmup_thread= will report =running= and
=ep_warmed_up= will be increasing as records are being read.

*** Complete

Once complete, =ep_warmed_up= will stop increasing and
=ep_warmup_thread= will report =complete=.
